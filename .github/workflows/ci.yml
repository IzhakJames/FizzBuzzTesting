name: CI Workflow

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # Set up Python 3.8
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # Install Python dependencies (if needed)
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Install any dependencies specified in requirements.txt
          pip install -r doc/requirements.txt  # Assuming you have a requirements.txt file in the doc folder

      # Cache Maven dependencies to speed up builds
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Install Maven dependencies
      - name: Install Maven dependencies
        run: mvn install -DskipTests

      # Run Maven build to ensure the code compiles
      - name: Build the project
        run: mvn clean install

      # Run tests with JUnit
      - name: Run all tests
        run: mvn test

      # Validate the specifications using the Python script
      - name: Validate specifications
        run: |
          python3 doc/validate_specifications.py

  # Optional: Linting and Code Formatting (for example, Checkstyle or SpotBugs)
#  lint:
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 11
#        uses: actions/setup-java@v2
#        with:
#          java-version: '11'
#
#      # Run code quality checks (using tools like Checkstyle, PMD, or SpotBugs)
#      - name: Run Checkstyle
#        run: mvn checkstyle:check
#
#      # Run SpotBugs (if configured)
#      - name: Run SpotBugs
#        run: mvn spotbugs:check
